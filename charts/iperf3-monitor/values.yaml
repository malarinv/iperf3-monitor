# Default values for iperf3-monitor.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Override the name of the chart.
nameOverride: ""

# -- Override the fully qualified app name.
fullnameOverride: ""

controllers:
  exporter:
    # -- Enable the exporter controller.
    enabled: true
    # -- Set the controller type for the exporter.
    # Valid options are "deployment" or "daemonset".
    # @default -- "deployment"
    type: deployment
    # -- Number of desired exporter pods. Only used if type is "deployment".
    # @default -- 1
    replicas: 1

    # -- Application-specific configuration for the iperf3 exporter.
    # These values are used to populate environment variables for the exporter container.
    appConfig:
      # -- Interval in seconds between complete test cycles (i.e., testing all server nodes).
      testInterval: 300
      # -- Log level for the iperf3 exporter (e.g., DEBUG, INFO, WARNING, ERROR, CRITICAL).
      logLevel: INFO
      # -- Timeout in seconds for a single iperf3 test run.
      testTimeout: 10
      # -- Protocol to use for testing (tcp or udp).
      testProtocol: tcp
      # -- iperf3 server port to connect to. Should match the server's listening port.
      # @default -- "5201" (hardcoded in the original chart for server daemonset)
      serverPort: "5201"
      # -- Label selector to find iperf3 server pods.
      # This will be templated in the actual deployment.
      # Example default (if not overridden by template logic): 'app.kubernetes.io/component=server'
      serverLabelSelector: 'app.kubernetes.io/name={{ include "iperf3-monitor.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=server'


    # -- Pod-level configurations for the exporter, leveraging bjw-s common library structure.
    pod:
      # -- Annotations for the exporter pod.
      annotations: {}
      # -- Labels for the exporter pod.
      labels: {} # The common library will add its own default labels.
      # -- Node selector for scheduling exporter pods.
      nodeSelector: {}
      # -- Tolerations for scheduling exporter pods.
      tolerations: []
      # -- Affinity rules for scheduling exporter pods.
      affinity: {}
      # -- Security context for the exporter pod.
      securityContext: {}
        # fsGroup: 65534
        # runAsUser: 65534
        # runAsGroup: 65534
        # runAsNonRoot: true
      # -- Automount service account token for the pod.
      automountServiceAccountToken: true # Default from common lib

    # -- Container-level configurations for the main exporter container.
    containers:
      exporter: # This is the primary container, name it 'exporter'
        image:
          # -- The container image repository for the exporter.
          repository: ghcr.io/malarinv/iperf3-monitor
          # -- The container image tag for the exporter. If not set, the chart's appVersion is used.
          tag: "" # Defaults to .Chart.AppVersion via common library
          # -- The image pull policy for the exporter container.
          pullPolicy: IfNotPresent

        # -- Environment variables for the exporter container.
        # The actual env map will be constructed in the main chart template
        # and passed to the common library. This section is for user overrides
        # if they want to directly set other env vars using common lib's env schema.
        env: {}
          # Example:
          # MY_CUSTOM_VAR: "my_value"
          # ANOTHER_VAR:
          #   valueFrom:
          #     secretKeyRef:
          #       name: mysecret
          #       key: mykey

        # -- Ports for the exporter container.
        ports:
          metrics: # Name of the port, will be used in Service definition
            # -- Port number for the metrics endpoint on the container.
            port: 9876 # Default, should match service.targetPort
            # -- Protocol for the metrics port.
            protocol: TCP # Common library defaults to TCP if not specified.
            enabled: true # This port is enabled

        # -- CPU and memory resource requests and limits for the exporter container.
        resources:
          {}
          # requests:
          #   cpu: "100m"
          #   memory: "128Mi"
          # limits:
          #   cpu: "500m"
          #   memory: "256Mi"

        # -- Probes configuration for the exporter container.
        probes:
          liveness:
            enabled: false
          readiness:
            enabled: false
          startup:
            enabled: false

# Server configuration (iperf3 server daemonset)
server:
  # -- Configuration for the iperf3 server container image (DaemonSet).
  image:
    # -- The container image repository for the iperf3 server.
    repository: networkstatic/iperf3
    # -- The container image tag for the iperf3 server.
    tag: latest

  # -- CPU and memory resource requests and limits for the iperf3 server pods (DaemonSet).
  resources:
    {}
    # requests:
    #   cpu: "50m"
    #   memory: "64Mi"
    # limits:
    #   cpu: "100m"
    #   memory: "128Mi"

  # -- Node selector for scheduling iperf3 server pods.
  nodeSelector: {}

  # -- Tolerations for scheduling iperf3 server pods on tainted nodes.
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"

# RBAC and ServiceAccount settings
# These are for the exporter. The exporter deployment (managed by common library)
# will need to use the ServiceAccount specified here or one created by the library.
rbac:
  # -- If true, create ServiceAccount, ClusterRole, and ClusterRoleBinding for the exporter.
  create: true

serviceAccount:
  # -- The name of the ServiceAccount to use/create for the exporter pod.
  # If rbac.create is true, this SA is created. The exporter pod must use this SA.
  name: "iperf3-monitor"

# Service Monitor configuration for Prometheus
serviceMonitor:
  # -- If true, create a ServiceMonitor resource.
  enabled: true
  # -- Scrape interval for the ServiceMonitor.
  interval: 60s
  # -- Scrape timeout for the ServiceMonitor.
  scrapeTimeout: 30s

# Service configuration for the exporter
# This defines how the exporter is exposed.
# The common library can also manage services, or we can use our own template.
# This structure is compatible with bjw-s common library's service management if we choose to use it.
service:
  main: # A key for the service, 'main' is a common convention.
    # -- Enable the exporter service.
    enabled: true
    # -- Service type.
    type: ClusterIP # ClusterIP is typical for internal services scraped by Prometheus.
    # -- Ports configuration for the service.
    ports:
      metrics: # Name of the service port, should align with a container port name.
        # -- Port number on which the service is exposed.
        port: 9876
        # -- Target port on the exporter pod. Can be a number or name.
        # Refers to the 'metrics' port defined in controllers.exporter.containers.exporter.ports.
        targetPort: metrics
        protocol: TCP

# Network Policy (optional)
networkPolicy:
  # -- If true, create a NetworkPolicy resource.
  enabled: false
  # -- Source selectors for ingress rules.
  from: []
  # -- Namespace selectors for ingress rules.
  namespaceSelector: {}
  # -- Pod selectors for ingress rules.
  podSelector: {}

# Dependency Configuration (for Prometheus Operator)
dependencies:
  # -- If true, install Prometheus operator dependency (used if serviceMonitor.enabled=true).
  install: true
  # -- If true, use TrueCharts Prometheus Operator instead of kube-prometheus-stack.
  useTrueChartsPrometheusOperator: false
